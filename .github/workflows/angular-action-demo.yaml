name: Angular actions demo

on:
  push:
    tags:
      - PROD_*

env:
  PNPM_VERSION: 10
  NODE_VERSION: 22
  PROJECT_NAME: "angular-action-demo"

permissions:
  contents: write

jobs:
  job_app_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: pnpm install
        run: pnpm install

      - name: pnpm run build
        run: pnpm run build

      - uses: actions/upload-artifact@v4
        name: Upload .git artifact
        with:
          name: dot_git
          path: .git
          include-hidden-files: true

      - uses: actions/upload-artifact@v4
        name: Upload artifact
        with:
          name: ${{env.PROJECT_NAME}}_build
          path: ./dist/

      - uses: actions/upload-artifact@v4
        name: Upload calculate hash tools
        with:
          name: calculate_hash_tools
          path: .github/tools/calculate_hash_tools

      - uses: actions/upload-artifact@v4
        name: Upload compare diff tools
        with:
          name: compare_diff_tools
          path: .github/tools/compare_diff_tools
          include-hidden-files: true

  job_generate_timestamp:
    runs-on: ubuntu-latest
    needs: job_app_build
    outputs:
      timestamp: ${{ steps.ts.outputs.value }}

    steps:
      - name: Generate timestamp
        id: ts
        run: echo "value=$(TZ=Asia/Taipei date +%Y%m%d_%H%M%S)" >> "$GITHUB_OUTPUT"

  job_calculate_hash:
    needs: ["job_app_build", "job_generate_timestamp"]
    runs-on: ubuntu-latest
    env:
      HASH_FILE: hash-diff-${{ needs.job_generate_timestamp.outputs.timestamp }}.json
    steps:
      - uses: actions/download-artifact@v4
        name: Download angular-action-artifact
        with:
          name: ${{env.PROJECT_NAME}}_build

      - uses: actions/download-artifact@v4
        name: Download angular-action-artifact
        with:
          name: calculate_hash_tools

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{env.PNPM_VERSION}}

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: calculate hash
        run: |
          pnpm install
          pnpm -s run start ${{env.PROJECT_NAME}}/ > ${{env.HASH_FILE}}

      - uses: actions/upload-artifact@v4
        name: Upload hash artifact
        with:
          name: ${{env.PROJECT_NAME}}_calculated
          path: |
            ./${{env.PROJECT_NAME}}
            ./${{env.HASH_FILE}}

  job_app_create_release:
    needs: ["job_calculate_hash", "job_generate_timestamp"]
    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create GitHub app_Release
        id: create_release
        uses: comnoco/create-release-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: "自動化釋出：包含 Angular build 與 hash 檔"
          draft: false
          prerelease: false

  job_zip_and_upload_dist_to_release:
    runs-on: ubuntu-latest
    needs: ["job_app_create_release", "job_generate_timestamp"]

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      UPLOAD_URL: ${{ needs.job_app_create_release.outputs.upload_url }}
      HASH_FILE: hash-diff-${{ needs.job_generate_timestamp.outputs.timestamp }}.json

    steps:
      - uses: actions/download-artifact@v4
        name: Download angular-action-artifact
        with:
          name: ${{env.PROJECT_NAME}}_calculated

      - name: Zip demo folder
        run: |
          zip -r ${{env.PROJECT_NAME}}-dist-${{ needs.job_generate_timestamp.outputs.timestamp }}.zip ${{env.PROJECT_NAME}}

      - name: Upload demo ZIP to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{env.PROJECT_NAME}}-dist-${{ needs.job_generate_timestamp.outputs.timestamp }}.zip
          asset_name: ${{env.PROJECT_NAME}}-dist-${{ needs.job_generate_timestamp.outputs.timestamp }}.zip
          asset_content_type: application/zip

      - name: Upload JSON to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{env.HASH_FILE}}
          asset_name: ${{env.HASH_FILE}}
          asset_content_type: application/json

  job_download_artifact:
    runs-on: ubuntu-latest
    needs:
      [
        "job_app_create_release",
        "job_zip_and_upload_dist_to_release",
        "job_generate_timestamp",
      ]

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      UPLOAD_URL: ${{ needs.job_app_create_release.outputs.upload_url }}
      RELEASE_DIFF_FILES: release_diff_files-${{ needs.job_generate_timestamp.outputs.timestamp }}

    steps:
      - uses: actions/download-artifact@v4
        name: Download dot_git
        with:
          name: dot_git

      - name: Debug
        run: ls -lart

      - name: Setup env
        run: |
          tags=($(gh release list --limit 2 --json tagName --jq '[.[].tagName]' | jq -r '.[] | select(startswith("PROD_"))'))
          echo "LATEST_TAG=${tags[0]}" >> $GITHUB_ENV
          echo "PREVIOUS_TAG=${tags[1]}" >> $GITHUB_ENV
          echo "LATEST_TAG=${tags[0]}"
          echo "PREVIOUS_TAG=${tags[1]}"

      - name: Download latest hash.json
        run: |
          url=$(gh release view "$LATEST_TAG" --json assets --jq '.assets[] | select(.name | endswith(".json")) | .url')
          curl -L -H "Authorization: token ${{ env.GH_TOKEN }}" \
              -H "Accept: application/octet-stream" \
              "$url" -o latest.json

      - name: Download previous hash.json
        run: |
          url=$(gh release view "$PREVIOUS_TAG" --json assets --jq '.assets[] | select(.name | endswith(".json")) | .url')
          curl -L -H "Authorization: token ${{ env.GH_TOKEN }}" \
              -H "Accept: application/octet-stream" \
              "$url" -o previous.json

      - name: Download latest ZIP
        run: |
          url=$(gh release view "$LATEST_TAG" --json assets --jq '.assets[] | select(.name | endswith(".zip")) | .url')
          curl -L -H "Authorization: token ${{ env.GH_TOKEN }}" \
              -H "Accept: application/octet-stream" "$url" -o ${{env.PROJECT_NAME}}.zip

          unzip ${{env.PROJECT_NAME}}.zip

      - name: Test
        run: |
          ls -lart
          cat latest.json
          cat previous.json
          ls ${{env.PROJECT_NAME}}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{env.PNPM_VERSION}}

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{env.NODE_VERSION}}

      - uses: actions/download-artifact@v4
        name: Download compare_diff_tools
        with:
          name: compare_diff_tools

      - name: Compare diff
        run: |
          pnpm run start latest.json previous.json ${{env.PROJECT_NAME}} ${{env.RELEASE_DIFF_FILES}}

      - name: Zip demo folder
        run: |
          zip -r ${{env.RELEASE_DIFF_FILES}}.zip ${{env.RELEASE_DIFF_FILES}}

      - name: Upload demo ZIP to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{env.RELEASE_DIFF_FILES}}.zip
          asset_name: ${{env.RELEASE_DIFF_FILES}}.zip
          asset_content_type: application/zip
